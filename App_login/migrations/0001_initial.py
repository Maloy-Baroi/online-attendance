# Generated by Django 3.1.7 on 2021-03-26 10:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=None)),
                ('is_teacher', models.BooleanField(default=None)),
                ('profile_picture', models.ImageField(upload_to='photos/profile_picture')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TeacherQualification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('University', models.CharField(max_length=254, null=True)),
                ('Subject', models.CharField(max_length=254, null=True)),
                ('Qualification', models.CharField(max_length=254, null=True)),
                ('passing_year', models.CharField(max_length=100)),
                ('Teacher_is', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_qualification_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeacherInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_id', models.CharField(max_length=255)),
                ('joining_date', models.DateField()),
                ('Mobile_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message='Enter a valid international mobile phone number starting with +(country code)', regex='^\\+?(88)01[3-9][0-9]{8}$')], verbose_name="Teacher's Mobile phone")),
                ('dept_name', models.CharField(max_length=50)),
                ('Designation', models.CharField(max_length=50)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('Female', 'Female'), ('Third Gender', 'Third Gender')], max_length=15)),
                ('Major_subject_type', models.CharField(max_length=50)),
                ('qualification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='App_login.teacherqualification')),
                ('teacher_user', models.OneToOneField(default=-1, on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_mobile_number', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid international mobile phone number starting with +(country code)', regex='^\\+?(88)01[3-9][0-9]{8}$')], verbose_name="Student's Mobile phone")),
                ('fathers_name', models.CharField(max_length=100)),
                ('fathers_nid', models.IntegerField()),
                ('fathers_mobile_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message='Enter a valid international mobile phone number starting with +(country code)', regex='^\\+?(88)01[3-9][0-9]{8}$')], verbose_name="Father's Mobile phone")),
                ('mothers_name', models.CharField(max_length=100)),
                ('mothers_nid', models.IntegerField()),
                ('mothers_mobile_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message='Enter a valid international mobile phone number starting with +(country code)', regex='^\\+?(88)01[3-9][0-9]{8}$')], verbose_name="Mother's Mobile phone")),
                ('Department', models.CharField(max_length=100)),
                ('admission_date', models.DateField()),
                ('student_id', models.CharField(max_length=50, unique=True)),
                ('age', models.IntegerField()),
                ('Date_of_Birth', models.DateField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('Female', 'Female'), ('Third Gender', 'Third Gender')], max_length=15)),
                ('batch', models.CharField(max_length=50)),
                ('section_type', models.CharField(max_length=20)),
                ('shift_type', models.CharField(max_length=100)),
                ('student_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('student_id', 'batch')},
            },
        ),
    ]
